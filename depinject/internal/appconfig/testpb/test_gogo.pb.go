// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: testpb/test_gogo.proto

package testpb

import (
	_ "cosmossdk.io/api/cosmos/app/v1alpha1"
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TestGogoRuntimeModule struct {
}

func (m *TestGogoRuntimeModule) Reset()         { *m = TestGogoRuntimeModule{} }
func (m *TestGogoRuntimeModule) String() string { return proto.CompactTextString(m) }
func (*TestGogoRuntimeModule) ProtoMessage()    {}
func (*TestGogoRuntimeModule) Descriptor() ([]byte, []int) {
	return fileDescriptor_873effbbb6b335c2, []int{0}
}
func (m *TestGogoRuntimeModule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestGogoRuntimeModule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestGogoRuntimeModule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestGogoRuntimeModule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestGogoRuntimeModule.Merge(m, src)
}
func (m *TestGogoRuntimeModule) XXX_Size() int {
	return m.Size()
}
func (m *TestGogoRuntimeModule) XXX_DiscardUnknown() {
	xxx_messageInfo_TestGogoRuntimeModule.DiscardUnknown(m)
}

var xxx_messageInfo_TestGogoRuntimeModule proto.InternalMessageInfo

type TestGogoModuleA struct {
}

func (m *TestGogoModuleA) Reset()         { *m = TestGogoModuleA{} }
func (m *TestGogoModuleA) String() string { return proto.CompactTextString(m) }
func (*TestGogoModuleA) ProtoMessage()    {}
func (*TestGogoModuleA) Descriptor() ([]byte, []int) {
	return fileDescriptor_873effbbb6b335c2, []int{1}
}
func (m *TestGogoModuleA) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestGogoModuleA) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestGogoModuleA.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestGogoModuleA) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestGogoModuleA.Merge(m, src)
}
func (m *TestGogoModuleA) XXX_Size() int {
	return m.Size()
}
func (m *TestGogoModuleA) XXX_DiscardUnknown() {
	xxx_messageInfo_TestGogoModuleA.DiscardUnknown(m)
}

var xxx_messageInfo_TestGogoModuleA proto.InternalMessageInfo

type TestGogoModuleB struct {
}

func (m *TestGogoModuleB) Reset()         { *m = TestGogoModuleB{} }
func (m *TestGogoModuleB) String() string { return proto.CompactTextString(m) }
func (*TestGogoModuleB) ProtoMessage()    {}
func (*TestGogoModuleB) Descriptor() ([]byte, []int) {
	return fileDescriptor_873effbbb6b335c2, []int{2}
}
func (m *TestGogoModuleB) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestGogoModuleB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestGogoModuleB.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestGogoModuleB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestGogoModuleB.Merge(m, src)
}
func (m *TestGogoModuleB) XXX_Size() int {
	return m.Size()
}
func (m *TestGogoModuleB) XXX_DiscardUnknown() {
	xxx_messageInfo_TestGogoModuleB.DiscardUnknown(m)
}

var xxx_messageInfo_TestGogoModuleB proto.InternalMessageInfo

type TestGogoUnregisteredModule struct {
}

func (m *TestGogoUnregisteredModule) Reset()         { *m = TestGogoUnregisteredModule{} }
func (m *TestGogoUnregisteredModule) String() string { return proto.CompactTextString(m) }
func (*TestGogoUnregisteredModule) ProtoMessage()    {}
func (*TestGogoUnregisteredModule) Descriptor() ([]byte, []int) {
	return fileDescriptor_873effbbb6b335c2, []int{3}
}
func (m *TestGogoUnregisteredModule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestGogoUnregisteredModule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestGogoUnregisteredModule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestGogoUnregisteredModule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestGogoUnregisteredModule.Merge(m, src)
}
func (m *TestGogoUnregisteredModule) XXX_Size() int {
	return m.Size()
}
func (m *TestGogoUnregisteredModule) XXX_DiscardUnknown() {
	xxx_messageInfo_TestGogoUnregisteredModule.DiscardUnknown(m)
}

var xxx_messageInfo_TestGogoUnregisteredModule proto.InternalMessageInfo

type TestGogoNoModuleOptionModule struct {
}

func (m *TestGogoNoModuleOptionModule) Reset()         { *m = TestGogoNoModuleOptionModule{} }
func (m *TestGogoNoModuleOptionModule) String() string { return proto.CompactTextString(m) }
func (*TestGogoNoModuleOptionModule) ProtoMessage()    {}
func (*TestGogoNoModuleOptionModule) Descriptor() ([]byte, []int) {
	return fileDescriptor_873effbbb6b335c2, []int{4}
}
func (m *TestGogoNoModuleOptionModule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestGogoNoModuleOptionModule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestGogoNoModuleOptionModule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestGogoNoModuleOptionModule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestGogoNoModuleOptionModule.Merge(m, src)
}
func (m *TestGogoNoModuleOptionModule) XXX_Size() int {
	return m.Size()
}
func (m *TestGogoNoModuleOptionModule) XXX_DiscardUnknown() {
	xxx_messageInfo_TestGogoNoModuleOptionModule.DiscardUnknown(m)
}

var xxx_messageInfo_TestGogoNoModuleOptionModule proto.InternalMessageInfo

type TestGogoNoGoImportModule struct {
}

func (m *TestGogoNoGoImportModule) Reset()         { *m = TestGogoNoGoImportModule{} }
func (m *TestGogoNoGoImportModule) String() string { return proto.CompactTextString(m) }
func (*TestGogoNoGoImportModule) ProtoMessage()    {}
func (*TestGogoNoGoImportModule) Descriptor() ([]byte, []int) {
	return fileDescriptor_873effbbb6b335c2, []int{5}
}
func (m *TestGogoNoGoImportModule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestGogoNoGoImportModule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestGogoNoGoImportModule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestGogoNoGoImportModule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestGogoNoGoImportModule.Merge(m, src)
}
func (m *TestGogoNoGoImportModule) XXX_Size() int {
	return m.Size()
}
func (m *TestGogoNoGoImportModule) XXX_DiscardUnknown() {
	xxx_messageInfo_TestGogoNoGoImportModule.DiscardUnknown(m)
}

var xxx_messageInfo_TestGogoNoGoImportModule proto.InternalMessageInfo

func init() {
	proto.RegisterType((*TestGogoRuntimeModule)(nil), "testpb.TestGogoRuntimeModule")
	proto.RegisterType((*TestGogoModuleA)(nil), "testpb.TestGogoModuleA")
	proto.RegisterType((*TestGogoModuleB)(nil), "testpb.TestGogoModuleB")
	proto.RegisterType((*TestGogoUnregisteredModule)(nil), "testpb.TestGogoUnregisteredModule")
	proto.RegisterType((*TestGogoNoModuleOptionModule)(nil), "testpb.TestGogoNoModuleOptionModule")
	proto.RegisterType((*TestGogoNoGoImportModule)(nil), "testpb.TestGogoNoGoImportModule")
}

func init() { proto.RegisterFile("testpb/test_gogo.proto", fileDescriptor_873effbbb6b335c2) }

var fileDescriptor_873effbbb6b335c2 = []byte{
	// 310 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2b, 0x49, 0x2d, 0x2e,
	0x29, 0x48, 0xd2, 0x07, 0x51, 0xf1, 0xe9, 0xf9, 0xe9, 0xf9, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9,
	0x42, 0x6c, 0x10, 0x71, 0x29, 0x85, 0xe4, 0xfc, 0xe2, 0xdc, 0xfc, 0x62, 0xfd, 0xc4, 0x82, 0x02,
	0xfd, 0x32, 0xc3, 0xc4, 0x9c, 0x82, 0x8c, 0x44, 0x43, 0xfd, 0xdc, 0xfc, 0x94, 0xd2, 0x9c, 0x54,
	0x88, 0x4a, 0x25, 0x27, 0x2e, 0xd1, 0x90, 0xd4, 0xe2, 0x12, 0xf7, 0xfc, 0xf4, 0xfc, 0xa0, 0xd2,
	0xbc, 0x92, 0xcc, 0xdc, 0x54, 0x5f, 0xb0, 0xb4, 0x95, 0xe6, 0xae, 0x03, 0xd3, 0x6e, 0x31, 0x2a,
	0x73, 0x29, 0x42, 0x8c, 0x28, 0x4e, 0xc9, 0xd6, 0xcb, 0xcc, 0xd7, 0x4f, 0xce, 0x2f, 0x4a, 0xd5,
	0xcf, 0xcc, 0x2b, 0x49, 0x2d, 0xca, 0x4b, 0xcc, 0xd1, 0x87, 0xd8, 0xa2, 0x64, 0xc3, 0xc5, 0x0f,
	0x33, 0x03, 0xa2, 0xd9, 0x91, 0x22, 0xdd, 0x4e, 0xa4, 0xe8, 0x76, 0xe7, 0x92, 0x82, 0xe9, 0x0e,
	0xcd, 0x2b, 0x4a, 0x4d, 0xcf, 0x2c, 0x2e, 0x49, 0x2d, 0x4a, 0x4d, 0x21, 0xdd, 0x13, 0x72, 0x5c,
	0x32, 0x30, 0x83, 0xfc, 0xa0, 0x0e, 0xf1, 0x2f, 0x28, 0xc9, 0xcc, 0xcf, 0x83, 0xb0, 0x95, 0x94,
	0xb8, 0x24, 0x10, 0xf2, 0xee, 0xf9, 0x9e, 0xb9, 0x05, 0xf9, 0x45, 0x25, 0x50, 0x6b, 0xd8, 0xc0,
	0xd6, 0x30, 0x38, 0x4d, 0x66, 0x3c, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f,
	0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x06, 0x2e,
	0xae, 0xe4, 0xfc, 0x5c, 0x3d, 0x88, 0x55, 0x4e, 0xbc, 0x30, 0x83, 0x02, 0x40, 0x51, 0x10, 0xc0,
	0x18, 0xa5, 0x86, 0xe2, 0xbc, 0x94, 0xd4, 0x82, 0xcc, 0xbc, 0xac, 0xd4, 0xe4, 0x12, 0x74, 0x37,
	0x2e, 0x62, 0x62, 0x0e, 0x89, 0x88, 0x58, 0xc5, 0xc4, 0x16, 0x02, 0xe6, 0x9e, 0x82, 0x31, 0x1e,
	0x31, 0x09, 0x41, 0x18, 0x31, 0xee, 0x01, 0x4e, 0xbe, 0xa9, 0x25, 0x89, 0x29, 0x89, 0x25, 0x89,
	0xaf, 0x60, 0xb2, 0x49, 0x6c, 0xe0, 0x98, 0x36, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xc9, 0x6e,
	0xa8, 0x7f, 0x2d, 0x02, 0x00, 0x00,
}

func (m *TestGogoRuntimeModule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestGogoRuntimeModule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestGogoRuntimeModule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TestGogoModuleA) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestGogoModuleA) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestGogoModuleA) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TestGogoModuleB) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestGogoModuleB) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestGogoModuleB) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TestGogoUnregisteredModule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestGogoUnregisteredModule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestGogoUnregisteredModule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TestGogoNoModuleOptionModule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestGogoNoModuleOptionModule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestGogoNoModuleOptionModule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TestGogoNoGoImportModule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestGogoNoGoImportModule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestGogoNoGoImportModule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTestGogo(dAtA []byte, offset int, v uint64) int {
	offset -= sovTestGogo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TestGogoRuntimeModule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TestGogoModuleA) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TestGogoModuleB) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TestGogoUnregisteredModule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TestGogoNoModuleOptionModule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TestGogoNoGoImportModule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTestGogo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTestGogo(x uint64) (n int) {
	return sovTestGogo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TestGogoRuntimeModule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestGogo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestGogoRuntimeModule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestGogoRuntimeModule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTestGogo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTestGogo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestGogoModuleA) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestGogo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestGogoModuleA: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestGogoModuleA: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTestGogo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTestGogo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestGogoModuleB) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestGogo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestGogoModuleB: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestGogoModuleB: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTestGogo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTestGogo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestGogoUnregisteredModule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestGogo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestGogoUnregisteredModule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestGogoUnregisteredModule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTestGogo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTestGogo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestGogoNoModuleOptionModule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestGogo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestGogoNoModuleOptionModule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestGogoNoModuleOptionModule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTestGogo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTestGogo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestGogoNoGoImportModule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestGogo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestGogoNoGoImportModule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestGogoNoGoImportModule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTestGogo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTestGogo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTestGogo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTestGogo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTestGogo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTestGogo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTestGogo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTestGogo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTestGogo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTestGogo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTestGogo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTestGogo = fmt.Errorf("proto: unexpected end of group")
)
